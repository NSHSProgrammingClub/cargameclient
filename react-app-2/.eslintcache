[{"/Users/larryqiu/cargameclient/react-app-2/src/index.js":"1","/Users/larryqiu/cargameclient/react-app-2/src/App.js":"2","/Users/larryqiu/cargameclient/react-app-2/src/settings.js":"3"},{"size":229,"mtime":1610125962413,"results":"4","hashOfConfig":"5"},{"size":9651,"mtime":1610156684361,"results":"6","hashOfConfig":"5"},{"size":592,"mtime":1610126116248,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"zvvr8a",{"filePath":"11","messages":"12","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/larryqiu/cargameclient/react-app-2/src/index.js",[],["17","18"],"/Users/larryqiu/cargameclient/react-app-2/src/App.js",["19","20","21","22","23","24","25"],"import './App.css';\n\nimport React from 'react';\nimport * as THREE from 'three';\nimport {\n    OrbitControls\n} from 'three/examples/jsm/controls/OrbitControls'\nimport adapter from 'webrtc-adapter';\nimport settings from \"./settings.js\"\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        // create a ref to store the textInput DOM element\n        this.forwardCam = React.createRef();\n        this.backwardCam = React.createRef();\n        this.rightCam = React.createRef();\n        this.leftCam = React.createRef();\n        this.upCam = React.createRef();\n        this.downCam = React.createRef();\n        this.clientId = -1;\n        this.serverId = -1;\n\n        this.scene = new THREE.Scene();\n        this.renderer = new THREE.WebGLRenderer();\n        this.numberVideosLoaded=0;\n    }\n    closeConnection() {\n        this.numberVideosLoaded=0;\n        if (this.connection != null) {\n            this.connection.close();\n            this.connection = null;\n        }\n    }\n    connect() {\n        console.log(settings);\n        let servers = settings.servers.useDev ? settings.servers.dev : settings.servers.prod;\n        this.socket = new WebSocket(servers.websocketURL);\n        this.socket.onopen = (event) => {\n            this.socket.send(JSON.stringify({\n                type: \"openClient\"\n            }));\n        };\n        this.numberVideosLoaded=0;\n        let iceCandidatesToProcess = []\n\n        let createPeerConnection = () => {\n            this.closeConnection();\n            iceCandidatesToProcess = [];\n            this.connection = new RTCPeerConnection({\n                iceServers: servers.iceServers,\n                sdpSemantics: \"unified-plan\"\n            });\n\n            this.connection.onicecandidate = (event) => {\n                if (event.candidate) {\n                    this.socket.send(JSON.stringify({\n                        type: \"clientIceCandidate\",\n                        candidate: JSON.stringify(event.candidate)\n                    }));\n                    if (settings.debugWebRTC) console.log(\"sent ice candidate\");\n                }\n            };\n            this.connection.oniceconnectionstatechange = (event) => {\n                if (settings.debugWebRTC) console.log(\"connection state \" + this.connection.iceConnectionState);\n\n                switch (this.connection.iceConnectionState) {\n                    case \"closed\":\n                    case \"failed\":\n                        console.log(\"Connection closed\");\n                        break;\n                }\n            };\n            this.connection.ontrack = (event) => {\n                for (var i = 0; i < event.streams.length; i++) {\n                    let stream = event.streams[i];\n                    this[event.track.label + \"Cam\"].current.srcObject = stream;\n                }\n                this.numberVideosLoaded++;\n                if(this.numberVideosLoaded==6)this.initRenderer();\n\n                if (settings.debugWebRTC) console.log(\"Track event \", event.streams);\n            };\n            this.connection.onremovetrack = (event) => {\n                this.numberVideosLoaded--;\n\n                if (settings.debugWebRTC) console.log(\"Track removal event \" + event);\n            };\n        }\n\n        this.socket.onmessage = (event) => {\n            let data = JSON.parse(event.data);\n            if (data.type == \"openClientInfo\") {\n                this.clientId = data.id;\n                if (settings.debugWebRTC) console.log(this.clientId);\n            } else if (data.type == \"openClientAssigned\") {\n                this.serverId = data.assignedServer;\n                createPeerConnection();\n            } else if (data.type == \"serverOfferSDP\") {\n\n                if (settings.debugWebRTC) console.log(\"recieved sdp\");\n\n                this.connection.setRemoteDescription({\n                        type: \"offer\",\n                        sdp: data.sdp\n                    })\n                    .then(() => {\n                        if (settings.debugWebRTC) console.log(\"processing \" + iceCandidatesToProcess.length + \" queued ice canidates\");\n\n                        for (var i = 0; i < iceCandidatesToProcess.length; i++) {\n                            this.connection.addIceCandidate(iceCandidatesToProcess[i]);\n                        }\n                        iceCandidatesToProcess = [];\n                    })\n                    .then(() => {\n                        return this.connection.createAnswer();\n                    })\n                    .then((answer) => {\n                        return this.connection.setLocalDescription(answer);\n                    })\n                    .then(() => {\n                        this.socket.send(JSON.stringify({\n                            type: \"clientAnswerSDP\",\n                            sdp: this.connection.localDescription.sdp\n                        }));\n                        if (settings.debugWebRTC) console.log(\"sent reply sdp \");\n                    });\n            } else if (data.type == \"serverIceCandidate\") {\n                var candidate = new RTCIceCandidate(JSON.parse(data.candidate));\n\n                if (this.connection && this.connection.remoteDescription && this.connection.remoteDescription.type) {\n                    this.connection.addIceCandidate(candidate);\n                    if (settings.debugWebRTC) console.log(\"processed recieved ice candidate\");\n                } else {\n                    iceCandidatesToProcess.push(candidate);\n\n                }\n\n            }\n        }\n\n    }\n    initRenderer() {\n        let camera = new THREE.PerspectiveCamera(settings.render.fov, 2, settings.render.near, settings.render.far);\n        camera.position.z = 0;\n        this.mount.appendChild(this.renderer.domElement);\n\n        let controls = new OrbitControls(camera, this.renderer.domElement);\n        controls.target.set(0, 0, 0);\n        controls.update()\n\n\n        let resizeRendererToDisplaySize = (renderer) => {\n            const canvas = this.renderer.domElement;\n            const width = window.innerWidth;\n            const height = window.innerHeight;\n            const needResize = canvas.width !== width || canvas.height !== height;\n            if (needResize) {\n                this.renderer.setSize(width, height, false);\n            }\n            return needResize;\n        }\n\n        let render = (time) => {\n\n            if (resizeRendererToDisplaySize(this.renderer)) {\n                camera.aspect = window.innerWidth / window.innerHeight;\n                camera.updateProjectionMatrix();\n            }\n            let materialArray = [];\n            let texture_ft = new THREE.TextureLoader().load( 'logo192.png');\n            let texture_bk = new THREE.TextureLoader().load( 'logo192.png');\n            let texture_up = new THREE.TextureLoader().load( 'logo192.png');\n            let texture_dn = new THREE.TextureLoader().load( 'logo192.png');\n            let texture_rt = new THREE.TextureLoader().load( 'logo192.png');\n            let texture_lf = new THREE.TextureLoader().load( 'logo192.png');\n\n            materialArray.push(new THREE.MeshBasicMaterial( { map: texture_ft }));\n            materialArray.push(new THREE.MeshBasicMaterial( { map: texture_bk }));\n            materialArray.push(new THREE.MeshBasicMaterial( { map: texture_up }));\n            materialArray.push(new THREE.MeshBasicMaterial( { map: texture_dn }));\n            materialArray.push(new THREE.MeshBasicMaterial( { map: texture_rt }));\n            materialArray.push(new THREE.MeshBasicMaterial( { map: texture_lf }));\n\n            for (let i = 0; i < 6; i++)\n              materialArray[i].side = THREE.BackSide;\n\n            let skyboxGeo = new THREE.BoxGeometry( 10000, 10000, 10000);\n            let skybox = new THREE.Mesh( skyboxGeo, materialArray );\n            this.scene.add( skybox );\n            /*\n            let textures=[this.forwardCam.current,this.backwardCam.current,this.rightCam.current,this.leftCam.current,this.upCam.current,this.downCam.current].map(\n                e=>new THREE.TextureLoader().load( \"logo512.png\" )//;new THREE.VideoTexture(e)\n            );\n            let cube= new THREE.CubeTextureLoader()\n        \t.setPath( 'textures' )\n        \t.load( [\n        \t\t'logo512.png',\n        \t\t'logo512.png',\n        \t\t'logo512.png',\n        \t\t'logo512.png',\n        \t\t'logo512.png',\n        \t\t'logo512.png'\n        \t] );\n            console.log(cube);\n            //cube.format = cube.images[0].format;\n            //cube.generateMipmaps = false;\n            //cube.minFilter = THREE.LinearFilter;\n            //cube.needsUpdate = true;\n            this.scene.background=cube;\n            //console.log(textures);\n            */\n            this.renderer.render(this.scene, camera);\n\n            window.requestAnimationFrame(render)\n        }\n\n        window.requestAnimationFrame(render)\n    }\n    componentDidMount() {\n        this.initRenderer()\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"render-div\" ref={ref => (this.mount = ref)} />\n                <div className=\"webgl-target\">\n                    <video ref={this.forwardCam} autoPlay muted></video>\n                    <video ref={this.backwardCam} autoPlay muted></video>\n                    <video ref={this.rightCam} autoPlay muted></video>\n                    <video ref={this.leftCam} autoPlay muted></video>\n                    <video ref={this.upCam} autoPlay muted></video>\n                    <video ref={this.downCam} autoPlay muted></video>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","/Users/larryqiu/cargameclient/react-app-2/src/settings.js",[],["26","27"],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":8,"column":8,"nodeType":"34","messageId":"35","endLine":8,"endColumn":15},{"ruleId":"36","severity":1,"message":"37","line":68,"column":17,"nodeType":"38","messageId":"39","endLine":73,"endColumn":18},{"ruleId":"40","severity":1,"message":"41","line":81,"column":43,"nodeType":"42","messageId":"43","endLine":81,"endColumn":45},{"ruleId":"40","severity":1,"message":"41","line":94,"column":27,"nodeType":"42","messageId":"43","endLine":94,"endColumn":29},{"ruleId":"40","severity":1,"message":"41","line":97,"column":34,"nodeType":"42","messageId":"43","endLine":97,"endColumn":36},{"ruleId":"40","severity":1,"message":"41","line":100,"column":34,"nodeType":"42","messageId":"43","endLine":100,"endColumn":36},{"ruleId":"40","severity":1,"message":"41","line":129,"column":34,"nodeType":"42","messageId":"43","endLine":129,"endColumn":36},{"ruleId":"28","replacedBy":"44"},{"ruleId":"30","replacedBy":"45"},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-unused-vars","'adapter' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["46"],["47"],"no-global-assign","no-unsafe-negation"]